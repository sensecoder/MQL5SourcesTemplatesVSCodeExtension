Расширение, которое применяет необходимый шаблон для файлов MQL5 программ.

16.02.2021 Ещё толком не изучил каким образом создавать расширения для VSCode, но надо делать. Учится и делать. Функционал расширения на первом этапе таков: 
   1. При создании файла *.mq5 или *.mqh прога предлагает применить соответствующий шаблон.
   2. Юзер делает выбор.
   3. Прога отрисовывает шаблон в окне эдитора.
Как выловить событие создания файла я уже разобрался. Но пока не разобрался как вносить изменения в окне эдитора. Так что сейчас буду с этим разбираться. Разобрался! Оно работает, но те так как я хотел. После создания файла, окно редактора открывается не сразу, так что нужно продумать ожидание открытия окна редактора нового файла.

17.02.2021 Сделаю подписку на открытие окна и тогда всё должно быть ок. Долго искал как это сделать. Оказывается нужна подписка на vscode.window.onDidChangeVisibleTextEditors(...). 
Далее нужно решить проблему посеръёзней... Необходимо применить шаблон, пока юзеру выбора не будет. Нужно, чтобы был использован файл шаблона, который я помещу в папочку ресурсов. Ну сперва наделаю этих шаблонов и создам папочку... Сделал шаблон для эксперта. Там появились тэги, которые требуют предварительной обработки перед тем как текст попадёт в нужное место. Ещё создал шаблон для класса. Также сделал файлик "template_settings.json" где будут хранится настройки разные для шаблонов.
Так, теперь о тэгах. Тэги заключены в угловые скобки. Их нужно будет отлавливать и заменять на значения переменных имя которых находится в этих скобках. Но это один тип тэгов. Есть ещё и параметры. Пока есть только однин параметр - это у шапки шаблона параметр у переменной "inHead", который означает, что параметр находится в шапке и его вставка должна производится определённым образом. Можно назвать "inHead" модификатором. Также есть переменные у которых прямо в шаблоне задются значения по-умолчанию, через знак "=", т.е. оператор условия. И ещё придумался оператор "if", он используется после ключевого слова "Optional" тэг с этим словом имеет и закрывающуюся конструкцию "/Optional". Текст между этими тэгами может отсутствовать в итоговом тексте шаблона, если условие не выполняется.
Таким образом, необходимо сделать систему, которая из текста в файле шаблона достаёт необходимый текст и подставляет соответствующим образом значения переменных. Надо бы поучить TypeScript, а то нужно же классы воротить для этих целей...

18.02.2021 Немного подучился (совсем чуток). Но сперва сделаю структуру из функций в "extension.ts", которая будет каркасом для функциональности. Далее этот каркас буду заполнять... До каркаса не дошёл, споткнулся на проверке расширения созданного файла. Надо найти способ как "читать" json файл с параметрами. Да и сам файл надо подкорректировать... Нашёл вроде как способ как читать файл, но ещё не полностью разобрался.

19.02.2021 Всё же сделаю каркас. Определение расшинения созданного файла, так же входит в структуру. Каркас готов. Определил основные классы: Creator, UserChoice и Insertor. А также методы, которые делают первичные входы для обработки. Далее занимался поиском файла настроек "template_settings.json", нашёл как его читать. Потом ломал голову над тем как его распарсить имеющимися средствами. Ничо из этого не вышло - придётся ваять свой парсер.